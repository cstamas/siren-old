
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 09 17:48:53 IST 2010
//----------------------------------------------------

package org.sindice.siren.qparser.entity;

import java_cup.runtime.*;
import java.io.IOException;
import org.sindice.siren.qparser.entity.query.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 09 17:48:53 IST 2010
  */
public class EntityQParserImpl extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public EntityQParserImpl() {super();}

  /** Constructor which sets the default scanner. */
  public EntityQParserImpl(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EntityQParserImpl(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\005\003\000\002" +
    "\005\002\000\002\006\004\000\002\006\003\000\002\007" +
    "\007\000\002\007\010\000\002\007\010\000\002\007\007" +
    "\000\002\007\010\000\002\007\010\000\002\007\007\000" +
    "\002\007\010\000\002\007\010\000\002\010\003\000\002" +
    "\010\002\000\002\011\004\000\002\011\003\000\002\012" +
    "\003\000\002\012\004\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\012\002\uffff\004\006\005\010\013\011\001" +
    "\002\000\012\002\001\004\006\005\010\013\011\001\002" +
    "\000\004\002\113\001\002\000\004\013\105\001\002\000" +
    "\012\002\ufffd\004\ufffd\005\ufffd\013\ufffd\001\002\000\004" +
    "\013\077\001\002\000\004\006\012\001\002\000\014\004" +
    "\022\005\014\006\017\007\ufff5\013\015\001\002\000\014" +
    "\004\031\005\033\007\uffe9\010\uffe9\013\015\001\002\000" +
    "\006\006\030\013\040\001\002\000\014\004\uffe5\005\uffe5" +
    "\007\uffe5\010\uffe5\013\uffe5\001\002\000\012\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\001\002\000\014\004\031\005\033" +
    "\010\uffe8\012\065\013\015\001\002\000\014\004\uffe6\005" +
    "\uffe6\007\uffe6\010\uffe6\013\uffe6\001\002\000\004\007\063" +
    "\001\002\000\006\006\047\013\046\001\002\000\004\007" +
    "\062\001\002\000\012\004\026\005\027\006\017\007\ufff6" +
    "\001\002\000\012\004\ufff4\005\ufff4\006\ufff4\007\ufff4\001" +
    "\002\000\004\006\047\001\002\000\004\006\030\001\002" +
    "\000\014\004\031\005\033\010\uffe8\012\034\013\015\001" +
    "\002\000\004\013\046\001\002\000\004\010\041\001\002" +
    "\000\004\013\040\001\002\000\004\010\035\001\002\000" +
    "\012\004\031\005\033\007\uffe8\013\015\001\002\000\004" +
    "\007\037\001\002\000\012\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\001\002\000\014\004\uffe3\005\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\001\002\000\014\004\031\005\033\007\uffe8\012" +
    "\043\013\015\001\002\000\004\007\045\001\002\000\004" +
    "\007\044\001\002\000\012\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\001\002\000\012\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\001\002\000\014\004\uffe4\005\uffe4\007\uffe4\010\uffe4\013" +
    "\uffe4\001\002\000\014\004\031\005\033\010\uffe8\012\051" +
    "\013\015\001\002\000\004\010\055\001\002\000\004\010" +
    "\052\001\002\000\012\004\031\005\033\007\uffe8\013\015" +
    "\001\002\000\004\007\054\001\002\000\012\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\001\002\000\014\004\031\005\033" +
    "\007\uffe8\012\057\013\015\001\002\000\004\007\061\001" +
    "\002\000\004\007\060\001\002\000\012\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\001\002\000\012\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\001\002\000\012\002\ufffb\004\ufffb\005\ufffb" +
    "\013\ufffb\001\002\000\012\002\ufffc\004\ufffc\005\ufffc\013" +
    "\ufffc\001\002\000\004\010\071\001\002\000\004\010\066" +
    "\001\002\000\012\004\031\005\033\007\uffe8\013\015\001" +
    "\002\000\004\007\070\001\002\000\012\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\001\002\000\014\004\031\005\033\007" +
    "\uffe8\012\073\013\015\001\002\000\004\007\075\001\002" +
    "\000\004\007\074\001\002\000\012\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\001\002\000\012\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\001\002\000\014\004\uffe7\005\uffe7\007\uffe7\010" +
    "\uffe7\013\uffe7\001\002\000\004\006\100\001\002\000\014" +
    "\004\022\005\014\006\017\007\ufff5\013\015\001\002\000" +
    "\004\007\104\001\002\000\004\007\103\001\002\000\012" +
    "\002\ufff7\004\ufff7\005\ufff7\013\ufff7\001\002\000\012\002" +
    "\ufff8\004\ufff8\005\ufff8\013\ufff8\001\002\000\004\006\106" +
    "\001\002\000\014\004\022\005\014\006\017\007\ufff5\013" +
    "\015\001\002\000\004\007\112\001\002\000\004\007\111" +
    "\001\002\000\012\002\ufff9\004\ufff9\005\ufff9\013\ufff9\001" +
    "\002\000\012\002\ufffa\004\ufffa\005\ufffa\013\ufffa\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufffe\004\ufffe\005" +
    "\ufffe\013\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\010\002\004\003\003\004\006\001\001\000" +
    "\004\004\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\020\006\023\007\015\010\022\011\012\012\017" +
    "\001\001\000\004\012\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\063\011\012" +
    "\012\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\031\011\012\012\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\035\011\012\012\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\041\011" +
    "\012\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\047\011\012\012\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\052\011\012\012\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\055" +
    "\011\012\012\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\066\011\012\012\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\071\011\012\012\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\100\006\023\007\015\010\101\011\012\012\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\106" +
    "\006\023\007\015\010\107\011\012\012\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EntityQParserImpl$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EntityQParserImpl$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EntityQParserImpl$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




		private static final
		Logger logger = LoggerFactory.getLogger(EntityQParserImpl.class);
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
      if (info instanceof Symbol) {
      	 String[] params = {message, 
      	                    Integer.toString(((Symbol) info).left+1),
      	                    Integer.toString(((Symbol) info).right+1)};
         logger.error("{} : Error in line {}, column {}", params);
      } else
         logger.error("{} : {}", message, cur_token);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) throws IOException {
      done_parsing();
      report_error(message, info);
      throw new IOException(message);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$EntityQParserImpl$actions {
  private final EntityQParserImpl parser;

  /** Constructor */
  CUP$EntityQParserImpl$actions(EntityQParserImpl parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$EntityQParserImpl$do_action(
    int                        CUP$EntityQParserImpl$act_num,
    java_cup.runtime.lr_parser CUP$EntityQParserImpl$parser,
    java.util.Stack            CUP$EntityQParserImpl$stack,
    int                        CUP$EntityQParserImpl$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EntityQParserImpl$result;

      /* select the action based on the action number */
      switch (CUP$EntityQParserImpl$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // KClause ::= MINUS TERM 
            {
              KClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = new KClause(t, Operator.MINUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KClause",8, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // KClause ::= PLUS TERM 
            {
              KClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = new KClause(t, Operator.PLUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KClause",8, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // KClause ::= TERM 
            {
              KClause RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = new KClause(t, Operator.NONE); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KClause",8, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // KClauseList ::= KClause 
            {
              KClauseList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		KClause c = (KClause)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = new KClauseList(c); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KClauseList",7, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // KClauseList ::= KClauseList KClause 
            {
              KClauseList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList l = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		KClause c = (KClause)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 ((KClauseList) l).append(c); RESULT = l; 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KClauseList",7, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // KQuery ::= 
            {
              KClauseList RESULT =null;
		 RESULT = new KClauseList(); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KQuery",6, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // KQuery ::= KClauseList 
            {
              KClauseList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		KClauseList l = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = l; 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("KQuery",6, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EClause ::= MINUS LPAR KQuery EQUAL WILDCARD RPAR 
            {
              EClause RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		KClauseList a = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		 RESULT = new AClause(a, Operator.MINUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-5)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EClause ::= PLUS LPAR KQuery EQUAL WILDCARD RPAR 
            {
              EClause RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		KClauseList a = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		 RESULT = new AClause(a, Operator.PLUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-5)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EClause ::= LPAR KQuery EQUAL WILDCARD RPAR 
            {
              EClause RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		KClauseList a = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		 RESULT = new AClause(a, Operator.NONE); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EClause ::= MINUS LPAR WILDCARD EQUAL KQuery RPAR 
            {
              EClause RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList v = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new VClause(v, Operator.MINUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-5)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EClause ::= PLUS LPAR WILDCARD EQUAL KQuery RPAR 
            {
              EClause RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList v = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new VClause(v, Operator.PLUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-5)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EClause ::= LPAR WILDCARD EQUAL KQuery RPAR 
            {
              EClause RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList v = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new VClause(v, Operator.NONE); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EClause ::= MINUS LPAR KQuery EQUAL KQuery RPAR 
            {
              EClause RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		KClauseList a = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList v = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new AVClause(a, v, Operator.MINUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-5)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EClause ::= PLUS LPAR KQuery EQUAL KQuery RPAR 
            {
              EClause RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		KClauseList a = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList v = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new AVClause(a, v, Operator.PLUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-5)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EClause ::= LPAR KQuery EQUAL KQuery RPAR 
            {
              EClause RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		KClauseList a = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList v = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new AVClause(a, v, Operator.NONE); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClause",5, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EClauseList ::= EClause 
            {
              EClauseList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		EClause c = (EClause)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = new EClauseList(c); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClauseList",4, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EClauseList ::= EClauseList EClause 
            {
              EClauseList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		EClauseList l = (EClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		EClause c = (EClause)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 ((EClauseList) l).append(c); RESULT = l; 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EClauseList",4, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EQuery ::= 
            {
              EClauseList RESULT =null;
		 RESULT = new EClauseList(); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EQuery",3, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EQuery ::= EClauseList 
            {
              EClauseList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		EClauseList l = (EClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = l; 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("EQuery",3, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Clause ::= MINUS TERM LPAR KQuery RPAR 
            {
              Clause RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int kclausesleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int kclausesright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList kclauses = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new KQuery(field, kclauses, Operator.MINUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",2, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Clause ::= MINUS TERM LPAR EQuery RPAR 
            {
              Clause RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int eclausesleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int eclausesright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		EClauseList eclauses = (EClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new EQuery(field, eclauses, Operator.MINUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",2, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Clause ::= PLUS TERM LPAR KQuery RPAR 
            {
              Clause RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int kclausesleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int kclausesright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList kclauses = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new KQuery(field, kclauses, Operator.PLUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",2, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Clause ::= PLUS TERM LPAR EQuery RPAR 
            {
              Clause RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int eclausesleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int eclausesright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		EClauseList eclauses = (EClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new EQuery(field, eclauses, Operator.PLUS); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",2, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-4)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Clause ::= TERM LPAR KQuery RPAR 
            {
              Clause RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int kclausesleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int kclausesright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		KClauseList kclauses = (KClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new KQuery(field, kclauses, Operator.NONE); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",2, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Clause ::= TERM LPAR EQuery RPAR 
            {
              Clause RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)).value;
		int eclausesleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int eclausesright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		EClauseList eclauses = (EClauseList)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		 RESULT = new EQuery(field, eclauses, Operator.NONE); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",2, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-3)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClauseList ::= Clause 
            {
              Query RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = new Query(c); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("ClauseList",1, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClauseList ::= ClauseList Clause 
            {
              Query RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		Query l = (Query)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 ((Query) l).append(c); RESULT = l; 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("ClauseList",1, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Query ::= 
            {
              Query RESULT =null;
		 RESULT = new Query(); 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Query",0, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Query EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).right;
		Query start_val = (Query)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)).value;
		RESULT = start_val;
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.elementAt(CUP$EntityQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EntityQParserImpl$parser.done_parsing();
          return CUP$EntityQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Query ::= ClauseList 
            {
              Query RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()).right;
		Query l = (Query)((java_cup.runtime.Symbol) CUP$EntityQParserImpl$stack.peek()).value;
		 RESULT = l; 
              CUP$EntityQParserImpl$result = parser.getSymbolFactory().newSymbol("Query",0, ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntityQParserImpl$stack.peek()), RESULT);
            }
          return CUP$EntityQParserImpl$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

