/*
 * Generated by classgen, version 1.3
 * 12/04/11 12:12
 */
package org.sindice.siren.qparser.ntriple.query.model;

public class BinaryClause extends Clause {

  private Expression lhe;
  private int op;
  private Expression rhe;

  public BinaryClause (Expression lhe, int op, Expression rhe) {
    this.lhe = lhe;
    if (lhe != null) lhe.setParent(this);
    this.op = op;
    this.rhe = rhe;
    if (rhe != null) rhe.setParent(this);
  }

  public Expression getLhe() {
    return lhe;
  }

  public void setLhe(Expression lhe) {
    this.lhe = lhe;
  }

  public int getOp() {
    return op;
  }

  public void setOp(int op) {
    this.op = op;
  }

  public Expression getRhe() {
    return rhe;
  }

  public void setRhe(Expression rhe) {
    this.rhe = rhe;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (lhe != null) lhe.accept(visitor);
    if (rhe != null) rhe.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (lhe != null) lhe.traverseTopDown(visitor);
    if (rhe != null) rhe.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (lhe != null) lhe.traverseBottomUp(visitor);
    if (rhe != null) rhe.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("BinaryClause(\n");
      if (lhe != null)
        buffer.append(lhe.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+op);
    buffer.append("\n");
      if (rhe != null)
        buffer.append(rhe.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [BinaryClause]");
    return buffer.toString();
  }
}
