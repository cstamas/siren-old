
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 28 10:25:27 CEST 2010
//----------------------------------------------------

package org.sindice.siren.qparser.ntriple;

import java_cup.runtime.*;
import java.io.IOException;
import org.sindice.siren.qparser.ntriple.query.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 28 10:25:27 CEST 2010
  */
public class NTripleQParserImpl extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public NTripleQParserImpl() {super();}

  /** Constructor which sets the default scanner. */
  public NTripleQParserImpl(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public NTripleQParserImpl(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\004\003\000\002\004\005\000" +
    "\002\005\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\012\002\uffff\007\012\011\013\012\004\001" +
    "\002\000\024\002\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\001\002\000\004\002" +
    "\031\001\002\000\014\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\001\002\000\014\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\010\ufffb\001\002\000\014\002\001\004\023\005\025" +
    "\006\024\010\001\001\002\000\006\011\013\012\004\001" +
    "\002\000\012\007\012\010\uffff\011\013\012\004\001\002" +
    "\000\024\002\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002\000\004\010\015" +
    "\001\002\000\014\002\ufff9\004\ufff9\005\ufff9\006\ufff9\010" +
    "\ufff9\001\002\000\012\011\013\012\004\013\017\014\021" +
    "\001\002\000\014\002\ufff6\004\ufff6\005\ufff6\006\ufff6\010" +
    "\ufff6\001\002\000\014\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\010\ufff8\001\002\000\014\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\010\ufff5\001\002\000\014\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\010\ufff7\001\002\000\010\007\012\011\013\012" +
    "\004\001\002\000\010\007\012\011\013\012\004\001\002" +
    "\000\010\007\012\011\013\012\004\001\002\000\014\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\001\002\000\014" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\001\002\000" +
    "\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\014\002\004\003\007\004\006\005\005\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\015\001\001\000\014\002\013\003\007\004\006\005\005" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\021\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\027\005\005\006\010\001\001\000\010" +
    "\004\026\005\005\006\010\001\001\000\010\004\025\005" +
    "\005\006\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$NTripleQParserImpl$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$NTripleQParserImpl$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$NTripleQParserImpl$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




		private static final
		Logger logger = LoggerFactory.getLogger(NTripleQParserImpl.class);
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
      if (info instanceof Symbol) {
      	 String[] params = {message, 
      	                    Integer.toString(((Symbol) info).left+1),
      	                    Integer.toString(((Symbol) info).right+1)};
         logger.error("{} : Error in line {}, column {}", params);
      } else
         logger.error("{} : {}", message, cur_token);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) throws IOException {
      done_parsing();
      report_error(message, info);
      throw new IOException(message);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$NTripleQParserImpl$actions {
  private final NTripleQParserImpl parser;

  /** Constructor */
  CUP$NTripleQParserImpl$actions(NTripleQParserImpl parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$NTripleQParserImpl$do_action(
    int                        CUP$NTripleQParserImpl$act_num,
    java_cup.runtime.lr_parser CUP$NTripleQParserImpl$parser,
    java.util.Stack            CUP$NTripleQParserImpl$stack,
    int                        CUP$NTripleQParserImpl$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$NTripleQParserImpl$result;

      /* select the action based on the action number */
      switch (CUP$NTripleQParserImpl$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Resource ::= WILDCARD 
            {
              Resource RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new Wildcard("*"); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Resource",4, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Resource ::= URIPATTERN 
            {
              Resource RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new URIPattern(u); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Resource",4, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Value ::= LPATTERN 
            {
              Value RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new LiteralPattern(p); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Value ::= LITERAL 
            {
              Value RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new Literal(l); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Value ::= Resource 
            {
              Value RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Resource r = (Resource)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = r; 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TriplePattern ::= Resource Resource Value 
            {
              TriplePattern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).right;
		Resource s = (Resource)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).right;
		Resource p = (Resource)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Value o = (Value)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new TriplePattern(s, p, o); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("TriplePattern",3, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expr ::= LPAREN Query RPAREN 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).right;
		NTripleQuery q = (NTripleQuery)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).value;
		 RESULT = new QueryExpression(q); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr ::= TriplePattern 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		TriplePattern p = (TriplePattern)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new SimpleExpression(p); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Clause ::= Expr 
            {
              Clause RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new UnaryClause(e); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",1, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Clause ::= Clause MINUS Expr 
            {
              Clause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 
                      	 if (c instanceof UnaryClause)
                           RESULT = new BinaryClause(c.getExpr(), Operator.MINUS, e);
                         else
                         	 RESULT = new NestedClause(c, Operator.MINUS, e);
                      
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",1, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Clause ::= Clause OR Expr 
            {
              Clause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 
                      	 if (c instanceof UnaryClause)
                           RESULT = new BinaryClause(c.getExpr(), Operator.OR, e);
                         else
                         	 RESULT = new NestedClause(c, Operator.OR, e);
                      
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",1, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Clause ::= Clause AND Expr 
            {
              Clause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 
                      	 if (c instanceof UnaryClause)
                           RESULT = new BinaryClause(c.getExpr(), Operator.AND, e);
                         else
                         	 RESULT = new NestedClause(c, Operator.AND, e);
                      
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Clause",1, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-2)), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Query ::= 
            {
              NTripleQuery RESULT =null;
		 RESULT = new EmptyQuery(); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Query",0, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Query EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).right;
		NTripleQuery start_val = (NTripleQuery)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)).value;
		RESULT = start_val;
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.elementAt(CUP$NTripleQParserImpl$top-1)), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$NTripleQParserImpl$parser.done_parsing();
          return CUP$NTripleQParserImpl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Query ::= Clause 
            {
              NTripleQuery RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$NTripleQParserImpl$stack.peek()).value;
		 RESULT = new ClauseQuery(c); 
              CUP$NTripleQParserImpl$result = parser.getSymbolFactory().newSymbol("Query",0, ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), ((java_cup.runtime.Symbol)CUP$NTripleQParserImpl$stack.peek()), RESULT);
            }
          return CUP$NTripleQParserImpl$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

