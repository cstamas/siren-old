/*
 * Generated by classgen, version 1.3
 * 12/04/11 12:12
 */
package org.sindice.siren.qparser.ntriple.query.model;

public abstract class Clause implements SyntaxNode {

  private org.apache.lucene.search.Query query;
  private java.util.Map queries;
  private SyntaxNode parent;

  public Expression getExpr() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setExpr(Expression expr) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Expression getLhe() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setLhe(Expression lhe) {
    throw new ClassCastException("tried to call abstract method");
  }

  public int getOp() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setOp(int op) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Expression getRhe() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setRhe(Expression rhe) {
    throw new ClassCastException("tried to call abstract method");
  }

  public Clause getLhc() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setLhc(Clause lhc) {
    throw new ClassCastException("tried to call abstract method");
  }

  public org.apache.lucene.search.Query getQuery() {
    return query;
  }

  public void setQuery(org.apache.lucene.search.Query query) {
    this.query = query;
  }

  public java.util.Map getQueries() {
    return queries;
  }

  public void setQueries(java.util.Map queries) {
    this.queries = queries;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public abstract void accept(Visitor visitor);
  public abstract void childrenAccept(Visitor visitor);
  public abstract void traverseTopDown(Visitor visitor);
  public abstract void traverseBottomUp(Visitor visitor);
  public String toString() {
    return toString("");
  }

  public abstract String toString(String tab);
}
