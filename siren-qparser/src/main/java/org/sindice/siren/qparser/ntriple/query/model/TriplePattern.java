/*
 * Generated by classgen, version 1.3
 * 12/04/11 12:12
 */
package org.sindice.siren.qparser.ntriple.query.model;

public class TriplePattern implements SyntaxNode {

  private SyntaxNode parent;
  private Resource s;
  private Resource p;
  private Value o;
  private org.apache.lucene.search.Query query;
  private java.util.Map queries;

  public TriplePattern (Resource s, Resource p, Value o) {
    this.s = s;
    if (s != null) s.setParent(this);
    this.p = p;
    if (p != null) p.setParent(this);
    this.o = o;
    if (o != null) o.setParent(this);
  }

  public Resource getS() {
    return s;
  }

  public void setS(Resource s) {
    this.s = s;
  }

  public Resource getP() {
    return p;
  }

  public void setP(Resource p) {
    this.p = p;
  }

  public Value getO() {
    return o;
  }

  public void setO(Value o) {
    this.o = o;
  }

  public org.apache.lucene.search.Query getQuery() {
    return query;
  }

  public void setQuery(org.apache.lucene.search.Query query) {
    this.query = query;
  }

  public java.util.Map getQueries() {
    return queries;
  }

  public void setQueries(java.util.Map queries) {
    this.queries = queries;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (s != null) s.accept(visitor);
    if (p != null) p.accept(visitor);
    if (o != null) o.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (s != null) s.traverseTopDown(visitor);
    if (p != null) p.traverseTopDown(visitor);
    if (o != null) o.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (s != null) s.traverseBottomUp(visitor);
    if (p != null) p.traverseBottomUp(visitor);
    if (o != null) o.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("TriplePattern(\n");
      if (s != null)
        buffer.append(s.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (p != null)
        buffer.append(p.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (o != null)
        buffer.append(o.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [TriplePattern]");
    return buffer.toString();
  }
}
